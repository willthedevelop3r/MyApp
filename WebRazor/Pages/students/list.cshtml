@page
@model StudentsModel
@{
    ViewData["Title"] = "Students List";
}

<h2>Admin - Manage Students</h2>

<div id="successMessage" class="alert alert-success mt-3" style="display: none;">
    Delete Successful!
</div>

<div id="errorMessage" class="alert alert-danger mt-3" style="display: none;"></div>

<div class="d-flex justify-content-between align-items-center mb-3">
    <button class="btn btn-primary" id="addStudentButton">Add Student</button>
    <input type="text" class="form-control w-25" id="searchBar" placeholder="Search...">
</div>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="d-flex align-items-center">
        <label for="schoolFilter" class="me-2">Filter by School:</label>
        <select id="schoolFilter" class="form-select w-auto">
        </select>
    </div>

    <div class="d-flex align-items-center">
        <label for="recordsPerPage" class="me-2">Show:</label>
        <select id="recordsPerPage" class="form-select w-auto">
            <option value="10" selected>10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped table-bordered" id="studentsTable">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll" /></th>
                <th>Name</th>
                <th>School</th>
                <th>Major</th>
                <th>Date Modified</th>
                <th>Active</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<div class="d-flex justify-content-end align-items-center mt-3" id="pagination"></div>

<button class="btn btn-danger mt-3" id="deleteButton" disabled onclick="deleteStudents()">Delete Selected</button>

@section Scripts {
    <script>
        let originalStudentsData = [];
        let studentsData = [];
        let schoolData = [];

        document.addEventListener("DOMContentLoaded", function () {

            fetchStudents();
            buildSchoolDDL();

            let addStudentButton = document.getElementById("addStudentButton");
            addStudentButton.addEventListener("click", function () {
                window.location.href = "/students/add";
            });


            let recordsDropdown = document.getElementById("recordsPerPage");
            recordsDropdown.addEventListener("change", function () {
                recordsPerPage = parseInt(this.value);
                currentPage = 1;
                displayStudents();
            });
            recordsDropdown.dispatchEvent(new Event("change"));


            let schoolFilter = document.getElementById("schoolFilter")
            schoolFilter.addEventListener("change", function () {
                displayStudents();
            });


            let searchBar = document.getElementById("searchBar");
            searchBar.addEventListener("input", function () {
                displayStudents();
            });
        });

        function buildSchoolDDL() {
            fetch("https://localhost:7243/api/schools", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(data => {
                    let schoolFilter = document.getElementById("schoolFilter");
                    schoolFilter.innerHTML = "";

                    let allOption = document.createElement("option");
                    allOption.value = "";
                    allOption.textContent = "All Schools";
                    schoolFilter.appendChild(allOption);

                    data.forEach(school => {
                        let option = document.createElement("option");
                        option.value = school.schoolId;
                        option.textContent = school.schoolName;
                        schoolFilter.appendChild(option);
                    });

                })

                .catch(error => console.error("Error fetching schools:", error));
        }


        function fetchStudents() {
            fetch("https://localhost:7243/api/students", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(data => {
                    originalStudentsData = data;
                    studentsData = [...originalStudentsData];
                    currentPage = 1;
                    displayStudents();
                })
                .catch(error => console.error("Error fetching students:", error));
        }

        function displayStudents() {
            let tableBody = document.querySelector("#studentsTable tbody");
            tableBody.innerHTML = "";

            let schoolFilter = document.getElementById("schoolFilter").value;
            studentsData = [...originalStudentsData];
            if (schoolFilter) {
                studentsData = studentsData.filter(student => student.schoolId === schoolFilter);
                currentPage = 1;

            }

            let searchbar = document.getElementById("searchBar").value.toLowerCase();
            let filteredData = studentsData.filter(student =>
                student.firstName.toLowerCase().includes(searchbar) ||
                student.lastName.toLowerCase().includes(searchbar) ||
                student.schoolName.toLowerCase().includes(searchbar) ||
                student.major.toLowerCase().includes(searchbar) ||
                String(student.isActive).toLowerCase().includes(searchbar) ||
                String(student.dateModified).toLowerCase().includes(searchbar)
            );

            let startIndex = (currentPage - 1) * recordsPerPage;
            let endIndex = startIndex + recordsPerPage;
            let paginatedData = filteredData.slice(startIndex, endIndex);
            paginatedData.forEach(student => {
                let formattedDate = new Date(student.dateModified).toISOString().split("T")[0];

                let row = document.createElement("tr");
                row.innerHTML = `
                                <td><input type="checkbox" class="studentCheckbox" value="${student.studentId}" /></td>
                                <td><a href="/students/edit?id=${student.studentId}" class="text-decoration-none">${student.lastName}, ${student.firstName}</a></td>
                                <td>${student.schoolName}</td>
                                <td>${student.major}</td>
                                <td>${formattedDate}</td>
                                <td>${student.isActive ? "True" : "False"}</td>
                            `;
                tableBody.appendChild(row);
            });

            generatePagination(filteredData.length);
            setupCheckboxEvents();
        }


        function generatePagination(totalRecords) {
            let totalPages = Math.ceil(totalRecords / recordsPerPage);
            let paginationContainer = document.getElementById("pagination");
            paginationContainer.innerHTML = "";

            for (let i = 1; i <= totalPages; i++) {
                let pageButton = document.createElement("button");
                pageButton.className = `btn btn-secondary mx-1 ${i === currentPage ? 'active' : ''}`;
                pageButton.textContent = i;
                pageButton.addEventListener("click", function () {
                    currentPage = i;
                    displayStudents();
                });

                paginationContainer.appendChild(pageButton);
            }
        }

        function setupCheckboxEvents() {
            let studentCheckboxes = document.querySelectorAll(".studentCheckbox");
            let selectAllCheckbox = document.getElementById("selectAll");
            let deleteButton = document.getElementById("deleteButton");

            selectAllCheckbox.addEventListener("change", () => {
                studentCheckboxes.forEach(cb => cb.checked = selectAllCheckbox.checked);
                deleteButton.disabled = !document.querySelector(".studentCheckbox:checked");
            });

            studentCheckboxes.forEach(cb => {
                cb.addEventListener("change", function () {
                    deleteButton.disabled = !document.querySelector(".studentCheckbox:checked");
                });
            });
        }

        function deleteStudents() {
            let selectedCheckboxes = document.querySelectorAll(".studentCheckbox:checked");
            let studentIds = Array.from(selectedCheckboxes).map(cb => cb.value);

            if (studentIds.length === 0) {
                alert("Please select at least one student to delete.");
                return;
            }

            const postObj = { Ids: studentIds };

            fetch("https://localhost:7243/api/students", {
                method: "DELETE",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(postObj)
            })
                .then(async response => {
                    let data = await response.json();

                    if (!response.ok) {
                        throw data;
                    }

                    return data;
                })
                .then(() => {
                    let successMessage = document.getElementById("successMessage");
                    successMessage.style.display = "block";
                    setTimeout(() => { successMessage.style.display = "none" }, 3000)
                    fetchStudents();
                })
                .catch(error => {
                    console.error("Error deleting students:", error);
                    if (error.errors) {
                        displayErrors(error.errors);
                    }
                });
        }

        function displayErrors(errors) {
            let errorDiv = document.getElementById("errorMessage");

            errorDiv.innerHTML = "";
            if (errors && Array.isArray(errors)) {
                errors.forEach(err => {
                    let errorItem = document.createElement("p");
                    errorItem.textContent = err;
                    errorDiv.appendChild(errorItem);
                });

                errorDiv.style.display = "block";

                setTimeout(() => {
                    errorDiv.style.display = "none";
                }, 3000)
            }
        }

    </script>
}
